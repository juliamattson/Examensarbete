{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/julia/OneDrive/Dokument/Repository/Examensarbete/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/julia/OneDrive/Dokument/Repository/Examensarbete/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/julia/OneDrive/Dokument/Repository/Examensarbete/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query{\\n    products {\\n        nodes {\\n          ... on SimpleProduct {\\n            id\\n            name\\n            price\\n            onSale\\n            description\\n            purchasable\\n            stockQuantity\\n          }\\n        }\\n      }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../Components/Layout\";\nimport client from '../Components/ApolloClient';\nimport Product from \"../Components/Products\";\nimport gql from 'graphql-tag';\nvar PRODUCTS_QUERY = gql(_templateObject());\n\nvar Index = function Index(props) {\n  console.log(props);\n  var products = props.products;\n  return /*#__PURE__*/_jsx(Layout, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"product-wrapper\"\n    })\n  });\n};\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var result;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return client.query({\n            query: PRODUCTS_QUERY\n          });\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: result.data.products.nodes\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/julia/OneDrive/Dokument/Repository/Examensarbete/pages/index.js"],"names":["Layout","client","Product","gql","PRODUCTS_QUERY","Index","props","console","log","products","getInitialProps","query","result","data","nodes"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,cAAc,GAAGD,GAAH,mBAApB;;AAgBA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AADqB,MAEbG,QAFa,GAEAH,KAFA,CAEbG,QAFa;AAGrB,sBACI,KAAC,MAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC;AAAf;AADJ,IADJ;AASH,CAZD;;KAAMJ,K;AAcNA,KAAK,CAACK,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACCT,MAAM,CAACU,KAAP,CAAa;AAAEA,YAAAA,KAAK,EAAEP;AAAT,WAAb,CADD;;AAAA;AACdQ,UAAAA,MADc;AAAA,2CAEb;AACHH,YAAAA,QAAQ,EAAEG,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAqBK;AAD5B,WAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAOA,eAAeT,KAAf","sourcesContent":["import Layout from \"../Components/Layout\";\r\nimport client from '../Components/ApolloClient';\r\nimport Product from \"../Components/Products\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst PRODUCTS_QUERY = gql`query{\r\n    products {\r\n        nodes {\r\n          ... on SimpleProduct {\r\n            id\r\n            name\r\n            price\r\n            onSale\r\n            description\r\n            purchasable\r\n            stockQuantity\r\n          }\r\n        }\r\n      }\r\n}`;\r\n\r\nconst Index = (props) => {\r\n    console.log(props)\r\n    const { products } = props;\r\n    return (\r\n        <Layout>\r\n            <div className=\"product-wrapper\">\r\n                {/*   {products.length ? (\r\n                    products.map(product => <Product product={product} key={product.id} />)\r\n                ) : ''} */}\r\n            </div>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nIndex.getInitialProps = async () => {\r\n    const result = await client.query({ query: PRODUCTS_QUERY });\r\n    return {\r\n        products: result.data.products.nodes\r\n    }\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}